#!/usr/bin/env python
# -*- coding=utf8 -*-
from typing import List
import pytest


class Solution:
    def isValidSudoku1(self, board: List[List[str]]) -> bool:
        def is_repeat(x_start=0, y_start=0, x_end=9, y_end=9):
            memo = set()
            for x in range(x_start, x_end):
                for y in range(y_start, y_end):
                    if board[x][y].isnumeric() and board[x][y] in memo:
                        return False
                    memo.add(board[x][y])
            return True

        for x in range(9):
            if not is_repeat(x_start=x, x_end=x + 1):
                return False
        for y in range(9):
            if not is_repeat(y_start=y, y_end=y + 1):
                return False

        for x in [0, 3, 6]:
            for y in [0, 3, 6]:
                if not is_repeat(x, y, x + 3, y + 3):
                    return False

        return True

    def isValidSudoku2(self, board: List[List[str]]) -> bool:
        """
        一次遍历，分别加上所在的行/列/网格，生成3个新字符串进行记录
        只需判断新字符串是否已存在即可
        """
        memo = set()
        for i in range(9):
            for j in range(9):
                val = board[i][j]
                if val.isnumeric():
                    new = (val + 'row' + str(i),
                           val + 'col' + str(j),
                           val + 'area' + str(i // 3) + str(j // 3))

                    for x in new:
                        if x in memo:
                            return False
                        else:
                            memo.add(x)
        return True


@pytest.mark.parametrize(('param', 'ret'), [
    ([
        ["5", "3", ".", ".", "7", ".", ".", ".", "."],
        ["6", ".", ".", "1", "9", "5", ".", ".", "."],
        [".", "9", "8", ".", ".", ".", ".", "6", "."],
        ["8", ".", ".", ".", "6", ".", ".", ".", "3"],
        ["4", ".", ".", "8", ".", "3", ".", ".", "1"],
        ["7", ".", ".", ".", "2", ".", ".", ".", "6"],
        [".", "6", ".", ".", ".", ".", "2", "8", "."],
        [".", ".", ".", "4", "1", "9", ".", ".", "5"],
        [".", ".", ".", ".", "8", ".", ".", "7", "9"]], True),
    ([
        [".", ".", "4", ".", ".", ".", "6", "3", "."],
        [".", ".", ".", ".", ".", ".", ".", ".", "."],
        ["5", ".", ".", ".", ".", ".", ".", "9", "."],
        [".", ".", ".", "5", "6", ".", ".", ".", "."],
        ["4", ".", "3", ".", ".", ".", ".", ".", "1"],
        [".", ".", ".", "7", ".", ".", ".", ".", "."],
        [".", ".", ".", "5", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", ".", ".", "."]], False),
    ([
        [".", ".", ".", "9", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", ".", ".", ".", "."],
        [".", ".", "3", ".", ".", ".", ".", ".", "1"],
        [".", ".", ".", ".", ".", ".", ".", ".", "."],
        ["1", ".", ".", ".", ".", ".", "3", ".", "."],
        [".", ".", ".", ".", "2", ".", "6", ".", "."],
        [".", "9", ".", ".", ".", ".", ".", "7", "."],
        [".", ".", ".", ".", ".", ".", ".", ".", "."],
        ["8", ".", ".", "8", ".", ".", ".", ".", "."]], False),
    ([
        [".", ".", ".", ".", "5", ".", ".", "1", "."],
        [".", "4", ".", "3", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", "3", ".", ".", "1"],
        ["8", ".", ".", ".", ".", ".", ".", "2", "."],
        [".", ".", "2", ".", "7", ".", ".", ".", "."],
        [".", "1", "5", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", "2", ".", ".", "."],
        [".", "2", ".", "9", ".", ".", ".", ".", "."],
        [".", ".", "4", ".", ".", ".", ".", ".", "."]], False),
    ([
        ["8", "3", ".", ".", "7", ".", ".", ".", "."],
        ["6", ".", ".", "1", "9", "5", ".", ".", "."],
        [".", "9", "8", ".", ".", ".", ".", "6", "."],
        ["8", ".", ".", ".", "6", ".", ".", ".", "3"],
        ["4", ".", ".", "8", ".", "3", ".", ".", "1"],
        ["7", ".", ".", ".", "2", ".", ".", ".", "6"],
        [".", "6", ".", ".", ".", ".", "2", "8", "."],
        [".", ".", ".", "4", "1", "9", ".", ".", "5"],
        [".", ".", ".", ".", "8", ".", ".", "7", "9"]], False)])
def test1(param, ret):
    solution = Solution()
    assert solution.isValidSudoku1(param) == ret
    assert solution.isValidSudoku2(param) == ret
